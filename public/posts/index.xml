<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Hello Friend NG</title>
        <link>https://example.com/posts/</link>
        <description>Recent content in Posts on Hello Friend NG</description>
        <generator>Hugo -- gohugo.io</generator>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Wed, 19 Jun 2019 14:40:12 +0800</lastBuildDate>
        <atom:link href="https://example.com/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>ECS 单元测试教学</title>
            <link>https://example.com/posts/2019/06/ecs-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E6%95%99%E5%AD%A6/</link>
            <pubDate>Wed, 19 Jun 2019 14:40:12 +0800</pubDate>
            
            <guid>https://example.com/posts/2019/06/ecs-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E6%95%99%E5%AD%A6/</guid>
            <description>网上的教学视频有些过时，因此想写一个新的教学，教大家如何对自己的ECS代码进行单元测试。
第一步 打开Unity单元测试的界面 位于Window/General/TestRunner。
第二步 建立TestFolder 位于Assets/Create/Test/Test Assembly Folder
FAQ：
 为什么要用asmdef？  我们只希望测试这一小片代码，因此不希望每次测试都让unity重新编译其他部分，因此只添加几个测试需要的依赖文件，这样可以让测试跑的很快。
 为什么要勾上Test Assemblies？  这样可以在打包时忽略这块代码，范围是该文件夹以内的代码。
 为什么只勾上Editor？  因为我们只在编辑器内需要这块代码。
 写好待测试的系统system与组件component  这里待测试的是ref关键字能否作用到嵌套struct中的内容。
system using Unity.Entities; public class UpdateNestedStruct : ComponentSystem { protected override void OnUpdate() { Entities.ForEach((ref T t) =&amp;gt; { t.point.X += 1; t.forTest += 1; }); } } component using System; using Unity.Entities;[Serializable] public struct T : IComponentData { public Point point; public int forTest; } public struct Point { public int X; public int Y; } 写单元测试 准备工作 翻一翻源码，可以看到Unity自个儿的单元测试是继承自ECSTestFixture，其目的是做一些准备工作。我们也有样学样，否则的话World 和 EntityManager都是空值。</description>
            <content type="html"><![CDATA[

<p>网上的教学视频有些过时，因此想写一个新的教学，教大家如何对自己的ECS代码进行单元测试。</p>

<h3 id="第一步-打开unity单元测试的界面">第一步 打开Unity单元测试的界面</h3>

<p>位于Window/General/TestRunner。</p>

<h3 id="第二步-建立testfolder">第二步 建立TestFolder</h3>

<p>位于Assets/Create/Test/Test Assembly Folder</p>

<p>FAQ：</p>

<ol>
<li>为什么要用asmdef？</li>
</ol>

<p>我们只希望测试这一小片代码，因此不希望每次测试都让unity重新编译其他部分，因此只添加几个测试需要的依赖文件，这样可以让测试跑的很快。</p>

<ol>
<li>为什么要勾上Test Assemblies？</li>
</ol>

<p>这样可以在打包时忽略这块代码，范围是该文件夹以内的代码。</p>

<ol>
<li>为什么只勾上Editor？</li>
</ol>

<p>因为我们只在编辑器内需要这块代码。</p>

<ol>
<li>写好待测试的系统system与组件component</li>
</ol>

<p>这里待测试的是ref关键字能否作用到嵌套struct中的内容。</p>

<h4 id="system">system</h4>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-C#" data-lang="C#"><span style="color:#66d9ef">using</span> Unity.Entities;

<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">UpdateNestedStruct</span> : ComponentSystem
{
    <span style="color:#66d9ef">protected</span> <span style="color:#66d9ef">override</span> <span style="color:#66d9ef">void</span> OnUpdate()
    {
        Entities.ForEach((<span style="color:#66d9ef">ref</span> T t) =&gt;
        {
            t.point.X += <span style="color:#ae81ff">1</span>;
            t.forTest += <span style="color:#ae81ff">1</span>;
        });
    }
}</code></pre></div>
<h4 id="component">component</h4>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-C#" data-lang="C#"><span style="color:#66d9ef">using</span> System;
<span style="color:#66d9ef">using</span> Unity.Entities;<span style="color:#a6e22e">
</span><span style="color:#a6e22e">
</span><span style="color:#a6e22e">[Serializable]</span>
<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">T</span> : IComponentData
{
    <span style="color:#66d9ef">public</span> Point point;
    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">int</span> forTest;
}

<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">Point</span>
{
    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">int</span> X;
    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">int</span> Y;
}</code></pre></div>
<h3 id="写单元测试">写单元测试</h3>

<h4 id="准备工作">准备工作</h4>

<p>翻一翻源码，可以看到Unity自个儿的单元测试是继承自ECSTestFixture，其目的是做一些准备工作。我们也有样学样，否则的话World 和 EntityManager都是空值。</p>

<p>一翻尝试之后，发现无法直接继承或者是调用Unity.Entities.Test这个库。解决办法是把ECSTestsFixture和TestComponent从Unity.Entities.Test中复制到自己的测试文件夹。</p>

<h4 id="手动update自己的系统">手动Update自己的系统</h4>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-C#" data-lang="C#"><span style="color:#66d9ef">using</span> NUnit.Framework;<span style="color:#a6e22e">
</span><span style="color:#a6e22e">
</span><span style="color:#a6e22e">[TestFixture]</span>
<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">UpdateNestedStructTests</span> : ECSTestsFixture
{<span style="color:#a6e22e">
</span><span style="color:#a6e22e">    [Test]</span>
    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> _0_Update_Normal_Var()
    {
        <span style="color:#66d9ef">var</span> entity = m_Manager.CreateEntity(<span style="color:#66d9ef">typeof</span>(T));

        World.GetOrCreateSystem&lt;UpdateNestedStruct&gt;().Update();
        <span style="color:#66d9ef">var</span> target = m_Manager.GetComponentData&lt;T&gt;(entity).forTest;
        Assert.AreEqual(<span style="color:#ae81ff">1</span>,target);
    }<span style="color:#a6e22e">
</span><span style="color:#a6e22e">
</span><span style="color:#a6e22e">    [Test]</span>
    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> _1_Update_Nested_Struct()
    {
        <span style="color:#66d9ef">var</span> entity = m_Manager.CreateEntity(<span style="color:#66d9ef">typeof</span>(T));
        
        World.GetOrCreateSystem&lt;UpdateNestedStruct&gt;().Update();
        <span style="color:#66d9ef">var</span> target = m_Manager.GetComponentData&lt;T&gt;(entity).point.X;
        Assert.AreEqual(<span style="color:#ae81ff">1</span>,target);
    }
}</code></pre></div>
<p>写好测试，我们回到编辑器，选中需要测试的代码，并点击Run Selected。</p>

<p>这样我们就写好一个ECS专用的单元测试了！</p>

<p>可以看到，手动更新系统的方式，让ECS与笨重的MonoBehaviour的测试方式区别很大。这让我们可以随意地测试每小块代码。</p>

<h3 id="reference">reference</h3>

<ul>
<li>5argon
<a href="https://medium.com/@5argon/unity-ecs-unit-testing-problems-with-ecs-8f31c7a37386" target="_blank">https://medium.com/@5argon/unity-ecs-unit-testing-problems-with-ecs-8f31c7a37386</a></li>
<li>infallible
<a href="https://www.youtube.com/watch?v=Ibj7O_fQXKs" target="_blank">https://www.youtube.com/watch?v=Ibj7O_fQXKs</a></li>
<li>Discuss
<a href="https://forum.unity.com/threads/how-to-unit-test-where-is-the-unity-entities-tests-namespace.540251/" target="_blank">https://forum.unity.com/threads/how-to-unit-test-where-is-the-unity-entities-tests-namespace.540251/</a></li>
</ul>
]]></content>
        </item>
        
    </channel>
</rss>
